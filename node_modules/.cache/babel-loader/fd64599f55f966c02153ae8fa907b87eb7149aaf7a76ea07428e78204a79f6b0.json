{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react\\\\tooltip-app\\\\src\\\\TooltipPreview.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TooltipPreview = ({\n  targetElement,\n  tooltipText,\n  textSize,\n  padding,\n  textColor,\n  backgroundColor,\n  cornerRadius,\n  tooltipWidth,\n  arrowWidth,\n  arrowHeight\n}) => {\n  const tooltipStyle = {\n    fontSize: textSize,\n    padding: `${padding}px`,\n    color: textColor,\n    backgroundColor,\n    borderRadius: `${cornerRadius}px`,\n    width: `${tooltipWidth}px`,\n    position: \"absolute\",\n    display: \"inline-block\",\n    zIndex: 9999\n  };\n  const arrowStyle = {\n    position: \"absolute\",\n    width: 0,\n    height: 0,\n    borderTop: `${arrowHeight}px solid transparent`,\n    borderBottom: `${arrowHeight}px solid transparent`,\n    borderRight: `${arrowWidth}px solid ${backgroundColor}`\n  };\n  const positionTooltip = () => {\n    // Calculate the tooltip position based on the target element and arrow direction\n    // You can implement this logic as per your requirement\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-preview\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"target-element\",\n      children: targetElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip\",\n      style: {\n        ...tooltipStyle,\n        ...positionTooltip()\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tooltip-arrow\",\n        style: arrowStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), tooltipText]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = TooltipPreview;\nexport default TooltipPreview;\nvar _c;\n$RefreshReg$(_c, \"TooltipPreview\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TooltipPreview","targetElement","tooltipText","textSize","padding","textColor","backgroundColor","cornerRadius","tooltipWidth","arrowWidth","arrowHeight","tooltipStyle","fontSize","color","borderRadius","width","position","display","zIndex","arrowStyle","height","borderTop","borderBottom","borderRight","positionTooltip","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/react/tooltip-app/src/TooltipPreview.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst TooltipPreview = ({\r\n  targetElement,\r\n  tooltipText,\r\n  textSize,\r\n  padding,\r\n  textColor,\r\n  backgroundColor,\r\n  cornerRadius,\r\n  tooltipWidth,\r\n  arrowWidth,\r\n  arrowHeight,\r\n}) => {\r\n  const tooltipStyle = {\r\n    fontSize: textSize,\r\n    padding: `${padding}px`,\r\n    color: textColor,\r\n    backgroundColor,\r\n    borderRadius: `${cornerRadius}px`,\r\n    width: `${tooltipWidth}px`,\r\n    position: \"absolute\",\r\n    display: \"inline-block\",\r\n    zIndex: 9999,\r\n  };\r\n\r\n  const arrowStyle = {\r\n    position: \"absolute\",\r\n    width: 0,\r\n    height: 0,\r\n    borderTop: `${arrowHeight}px solid transparent`,\r\n    borderBottom: `${arrowHeight}px solid transparent`,\r\n    borderRight: `${arrowWidth}px solid ${backgroundColor}`,\r\n  };\r\n\r\n  const positionTooltip = () => {\r\n    // Calculate the tooltip position based on the target element and arrow direction\r\n    // You can implement this logic as per your requirement\r\n  };\r\n\r\n  return (\r\n    <div className=\"tooltip-preview\">\r\n      <div className=\"target-element\">{targetElement}</div>\r\n      <div\r\n        className=\"tooltip\"\r\n        style={{\r\n          ...tooltipStyle,\r\n          ...positionTooltip(),\r\n        }}\r\n      >\r\n        <span className=\"tooltip-arrow\" style={arrowStyle} />\r\n        {tooltipText}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TooltipPreview;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAGA,CAAC;EACtBC,aAAa;EACbC,WAAW;EACXC,QAAQ;EACRC,OAAO;EACPC,SAAS;EACTC,eAAe;EACfC,YAAY;EACZC,YAAY;EACZC,UAAU;EACVC;AACF,CAAC,KAAK;EACJ,MAAMC,YAAY,GAAG;IACnBC,QAAQ,EAAET,QAAQ;IAClBC,OAAO,EAAG,GAAEA,OAAQ,IAAG;IACvBS,KAAK,EAAER,SAAS;IAChBC,eAAe;IACfQ,YAAY,EAAG,GAAEP,YAAa,IAAG;IACjCQ,KAAK,EAAG,GAAEP,YAAa,IAAG;IAC1BQ,QAAQ,EAAE,UAAU;IACpBC,OAAO,EAAE,cAAc;IACvBC,MAAM,EAAE;EACV,CAAC;EAED,MAAMC,UAAU,GAAG;IACjBH,QAAQ,EAAE,UAAU;IACpBD,KAAK,EAAE,CAAC;IACRK,MAAM,EAAE,CAAC;IACTC,SAAS,EAAG,GAAEX,WAAY,sBAAqB;IAC/CY,YAAY,EAAG,GAAEZ,WAAY,sBAAqB;IAClDa,WAAW,EAAG,GAAEd,UAAW,YAAWH,eAAgB;EACxD,CAAC;EAED,MAAMkB,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA;EAAA,CACD;EAED,oBACEzB,OAAA;IAAK0B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B3B,OAAA;MAAK0B,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAEzB;IAAa;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrD/B,OAAA;MACE0B,SAAS,EAAC,SAAS;MACnBM,KAAK,EAAE;QACL,GAAGpB,YAAY;QACf,GAAGa,eAAe,CAAC;MACrB,CAAE;MAAAE,QAAA,gBAEF3B,OAAA;QAAM0B,SAAS,EAAC,eAAe;QAACM,KAAK,EAAEZ;MAAW;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACpD5B,WAAW;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACE,EAAA,GArDIhC,cAAc;AAuDpB,eAAeA,cAAc;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}